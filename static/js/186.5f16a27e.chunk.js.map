{"version":3,"file":"static/js/186.5f16a27e.chunk.js","mappings":"kMAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,mCACTC,SAAU,SAGL,MAAMC,EAAmBC,UAC9B,MAAMC,QAAiBL,EAAAA,EAAAA,IAAU,qBAC3B,KAAEM,GAASD,EACjB,GAAIA,EAASE,OAAS,KAAOF,EAASE,QAAU,IAC9C,MAAM,IAAIC,MAAM,gCAAkCH,EAASE,QAE7D,OAAOD,EAAKG,OAAO,EAGRC,EAAmBN,UAC9B,MAAMC,QAAiBL,EAAAA,EAAAA,IAAU,SAADW,OAAUC,KACpC,KAAEN,GAASD,EACjB,GAAIA,EAASE,OAAS,KAAOF,EAASE,QAAU,IAC9C,MAAM,IAAIC,MAAM,gCAAkCH,EAASE,QAE7D,OAAOD,CAAI,EAGAO,EAAYT,UACvB,MAAMC,QAAiBL,EAAAA,EAAAA,IAAU,SAADW,OAAUC,EAAO,cAC3C,KAAEN,GAASD,EACjB,GAAIA,EAASE,OAAS,KAAOF,EAASE,QAAU,IAC9C,MAAM,IAAIC,MAAM,gCAAkCH,EAASE,QAE7D,OAAOD,EAAKQ,IAAI,EAGLC,EAAeX,UAC1B,MAAMC,QAAiBL,EAAAA,EAAAA,IAAU,SAADW,OAAUC,EAAO,cAC3C,KAAEN,GAASD,EACjB,GAAIA,EAASE,OAAS,KAAOF,EAASE,QAAU,IAC9C,MAAM,IAAIC,MAAM,gCAAkCH,EAASE,QAE7D,OAAOD,EAAKG,OAAO,EAGRO,EAAoBZ,UAC/B,MAAMC,QAAiBL,EAAAA,EAAAA,IAAU,sBAADW,OAAuBM,KACjD,KAAEX,GAASD,EACjB,GAAIA,EAASE,OAAS,KAAOF,EAASE,QAAU,IAC9C,MAAM,IAAIC,MAAM,gCAAkCH,EAASE,QAE7D,OAAOD,EAAKG,OAAO,C,uGC5CrB,MAsEA,EAtEgBS,KACd,MAAOC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,OAC7B,QAAET,IAAYc,EAAAA,EAAAA,MAoCpB,OAjCAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAkB,IAAIC,gBACtBC,EAASF,EAAgBE,OAE/B,IAAKlB,EAAS,OAwBd,MAtBmBR,WACjBmB,GAAa,GACbE,EAAS,MACT,IACE,MAAMnB,QAAaS,EAAAA,EAAAA,IAAaH,EAAS,CAAEkB,WAC3CV,EAAgBd,GACI,IAAhBA,EAAKyB,QACPC,EAAAA,GAAAA,KAAW,iCAWf,CATE,MAAOR,GACY,eAAfA,EAAMS,KACRC,QAAQC,IAAI,wBAEZV,EAASD,GACTQ,EAAAA,GAAAA,KAAWR,EAAMY,SAErB,CAAC,QACCb,GAAa,EACf,GAEFc,GAEO,KACLT,EAAgBU,OAAO,CACxB,GACA,CAAC1B,KAGF2B,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACa,OAAVhB,GAAkBQ,EAAAA,GAAAA,MAAYR,GAC9BF,IAAamB,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACrBD,EAAAA,EAAAA,KAAA,MAAAD,SACGrB,EAAawB,KACZC,IAA0D,IAAzD,OAAEC,EAAM,GAAEC,EAAE,QAAEC,EAAO,WAAEC,EAAU,eAAEC,GAAgBL,EAClD,OACEL,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OACES,IACED,GAAkBA,EAAeE,YAAW,mCAAAxC,OACLsC,EAAeE,aA/CrD,6BAkDHC,MAAO,IACPC,IAAI,UAENZ,EAAAA,EAAAA,KAAA,MAAAD,SAAKK,KACLJ,EAAAA,EAAAA,KAAA,QAAAD,SAAOQ,KACPP,EAAAA,EAAAA,KAAA,KAAAD,SAAIO,MAZGD,EAaJ,QAKT,C","sources":["api/api.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: 'fb5a8efc74b4cfbb21e23283cbfdefb3',\n  language: 'en-US',\n};\n\nexport const fetchHomeMovList = async () => {\n  const response = await axios.get('trending/all/day');\n  const { data } = response;\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error('Data failed to load. Status: ' + response.status);\n  }\n  return data.results;\n};\n\nexport const fetchMovieDetail = async movieId => {\n  const response = await axios.get(`movie/${movieId}`);\n  const { data } = response;\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error('Data failed to load. Status: ' + response.status);\n  }\n  return data;\n};\n\nexport const fetchCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits`);\n  const { data } = response;\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error('Data failed to load. Status: ' + response.status);\n  }\n  return data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews`);\n  const { data } = response;\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error('Data failed to load. Status: ' + response.status);\n  }\n  return data.results;\n};\n\nexport const fetchSearchMovies = async movieQuery => {\n  const response = await axios.get(`search/movie?query=${movieQuery}`);\n  const { data } = response;\n  if (response.status < 200 || response.status >= 300) {\n    throw new Error('Data failed to load. Status: ' + response.status);\n  }\n  return data.results;\n};\n","import { useParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport React, { useEffect, useState } from 'react';\nimport { fetchReviews } from 'api/api';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const defaultImg = 'https://fakeimg.pl/200x300';\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n\n    if (!movieId) return;\n\n    const getReviews = async () => {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const data = await fetchReviews(movieId, { signal });\n        setMovieReviews(data);\n        if (data.length === 0) {\n          toast.warn('No data found for your request');\n        }\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          console.log('Request was aborted');\n        } else {\n          setError(error);\n          toast.warn(error.message);\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getReviews();\n\n    return () => {\n      abortController.abort();\n    };\n  }, [movieId]);\n\n  return (\n    <div>\n      {error !== null && toast.error(error)}\n      {isLoading && <Loader />}\n      <ul>\n        {movieReviews.map(\n          ({ author, id, content, created_at, author_details }) => {\n            return (\n              <li key={id}>\n                <img\n                  src={\n                    author_details && author_details.avatar_path\n                      ? `https://image.tmdb.org/t/p/w200/${author_details.avatar_path}`\n                      : defaultImg\n                  }\n                  width={200}\n                  alt=\"Card\"\n                />\n                <h3>{author}</h3>\n                <span>{created_at}</span>\n                <p>{content}</p>\n              </li>\n            );\n          }\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","api_key","language","fetchHomeMovList","async","response","data","status","Error","results","fetchMovieDetail","concat","movieId","fetchCast","cast","fetchReviews","fetchSearchMovies","movieQuery","Reviews","movieReviews","setMovieReviews","useState","isLoading","setIsLoading","error","setError","useParams","useEffect","abortController","AbortController","signal","length","toast","name","console","log","message","getReviews","abort","_jsxs","children","_jsx","Loader","map","_ref","author","id","content","created_at","author_details","src","avatar_path","width","alt"],"sourceRoot":""}